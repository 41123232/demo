<h1>About</h1>
<p>在 2022 Fall 的課程中, 採近全雲端的機械產品設計, 可以透過瀏覽器直接利用 stud 伺服器與 Onshape 執行程式編寫、內容管理與零組件設計繪圖, 唯獨機電模擬目前仍無法全部在瀏覽器中運行, 但至少已經可以透過 Three.js 與 Websocket 的整合, 讓 CoppeliaSim 的模擬場景在瀏覽器中呈現. 另外一個趨勢是, 除了電腦必須讓手機與平板在機械設計流程中扮演更重要的角色. 網站的內容維護與觀看更需考慮在電腦、手機與平板都能平順進行.</p>
<p>至於近端的機械產品設計流程則可以採 Solvespace 與 NX 完成零組件設計繪圖, 並以可攜程式環境編寫 server 端的應用程式, 用來控制零組件參數或進行機電模擬系統的控制等. 而 cmsimde 在近端也可以如遠端操作進行動態與靜態網頁的維護與展示.</p>
<p>靜態網站: <a href="https://mde.tw/demo/">https://mde.tw/demo/</a></p>
<p>倉儲: <a href="https://github.com/mdecycu/demo">https://github.com/mdecycu/demo</a></p>
<p>公佈欄網站: <a href="https://mde.tw/wcms">https://mde.tw/wcms</a></p>
<p></p>
<h2>語音輸入</h2>
<p>cmsimde 動態網頁若能在手機瀏覽器中開啟, 就能使用語音輸入頁面內容</p>
<p>在這個頁面我們使用手機的語音辨識來輸入內容</p>
<p>一方面可以當作備忘錄來使用</p>
<p>再者可以把一些即時想到的事項</p>
<p>或者是未來即將處理的網站改版提醒放在這裡</p>
<p>頁面編輯之後，可以轉為靜態網頁，然後使用 acp 按鈕直接將改版內容提交到 GitHub Pages</p>
<h2>w5</h2>
<p>Under Windows:</p>
<ol>
<li data-aria-level="1" data-aria-posinset="1"><span data-contrast="auto"><span>所謂 Secure Shell 就是利用</span></span><a href="https://zh.m.wikipedia.org/zh-tw/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86"><span data-contrast="auto"><span>公開金鑰加密</span></span></a><span data-contrast="auto"><span>, 在傳輸指令的過程對內容加密, 以保障資訊不被第三方取得, 當使用者在近端執行個人倉儲的動態網站後進行編輯改版, 並將動態網站轉為靜態網站, 希望將新的靜態網站內容送到 Github Pages  中的過程, 可以透過 SSH 協定建立一對數位鑰匙, 其公開鑰匙登錄到 Github SSH 設定區, 而私人鑰匙則放在近端電腦或隨身碟中, 當推送資料時只有與帳號下公鑰配對的私鑰擁有者, 有權限更改倉儲內容, 以下為在 Windows 操作系統採 SSH 對 Github 倉儲進行改版的設定過程.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="2"><span data-contrast="auto"><span>確定  start.bat 啟動時已經設定 GIT_SSH 變數, 且與 plink.exe 連結, 表示設定之後的 Git  指令, 若採 SSH 協定與 Github 溝通, 近端的金鑰加密格式採用 Putty 所提供的 ppk 格式.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="3"><span data-contrast="auto"><span>在 Windows 操作系統, 可以</span></span><span data-contrast="auto"><span>利用 Putty 的 puttygen.exe 產生 public key (OpenSSH 格式, 可登錄到 Github) 與 private key (ppk 格式), 且將 public key 放入 Github 帳號下 settings -&gt; SSH and GPG 設定區.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="4"><span data-contrast="auto"><span>將 private key 存入隨身碟或 C 槽後,  送到自己的 onedrive 區, 當設定  putty.exe session 時必須在 session 使用授權區給定私鑰儲存位置.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="5"><span data-contrast="auto"><span>利用 putty.exe 在電腦上設定一個 session 名稱, 且此一 session 名稱,</span></span><span data-contrast="auto"><span>代表三項資訊: a. 以 SSH  協定連結到 github.com (default port 為 22),  b. 決定需不需要使用 proxy (github.com 目前僅支援 IPv4), c. ppk 格式的 private key 位置.</span></span><span> </span></li>
</ol>
<p><span> </span></p>
<p><span data-contrast="auto"><span>利用 Putty session 以 SSH 協定 git clone 遠端倉儲, 假如前述設定都正確的話, 就可以在近端改版後, 將版本推向 Github.</span></span><span> </span></p>
<p><span> </span></p>
<p><span data-contrast="auto"><span>SSH  從 Github git clone  語法:</span></span><span> </span></p>
<p><span> </span></p>
<p><span data-contrast="auto"><span>git clone  --recurse-submodules  </span></span><a href="mailto:git@putty_session_name:github_account/repository_name.git"><span data-contrast="auto"><span>git@putty_session_name:github_account/repository_name.git</span></span></a><span> </span></p>
<p><span> </span></p>
<p><span data-contrast="auto"><span>請特別注意  putty_session_name 與  github_account 中間為 :<br/></span></span></p>
<hr/>
<p>Under Ubuntu</p>
<ol>
<li data-aria-level="1" data-aria-posinset="1"><span data-contrast="auto"><span>(登入 stud.cycu.org)利用 @nfu 電子郵箱收到的帳號與密碼, 登入 stud.cycu.org:  在命令列視窗, 以 ssh </span></span><span data-contrast="auto"><span>cad學號@stud.cycu.org , 輸入對應密後, 可以登入系統</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="2"><span data-contrast="auto"><span>請到 excel 檔案 </span></span><a href="https://nfuedu-my.sharepoint.com/:x:/g/personal/yen_nfu_edu_tw/ET-JZNPkNtZDhFiLt8BGZZ4BFMVV1HE73WQt1V44y6vnCQ"><span data-contrast="auto"><span>查詢</span></span></a><span data-contrast="auto"><span> stud.cycu.org 中與帳號對應的近端 (給 127.0.0.1 使用) 與遠端 (給 stud.cycu.org) 埠號</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="3"><span data-contrast="auto"><span>(透過 sftp 建立近端目錄與 stud.cycu.org 帳號下的對應)  開啟另一個命令列, 執行 sftp </span></span><a href="mailto:帳號@stud.cycu.org"><span data-contrast="auto"><span>帳號@stud.cycu.org</span></span></a><span data-contrast="auto"><span>   </span></span><span data-contrast="auto"><span>輸入對應密碼, 即可建立近端目錄與遠端系統目錄間的對應.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="4"><span data-contrast="auto"><span>與在近端(Windows)利用  SSH 建立 public/private keys 流程相同, 必須在 Linux (Ubuntu) 利用 ssh-keygen 建立 keys. 所產生的 id_rsa 為 private key, 而 id_rsa.pub 為 public key, 都位於 .ssh 目錄下.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="5"><span data-contrast="auto"><span>利用 sftp  進入 stud.cycu.org 後, cd 到 .ssh, 以 get id_rsa.pub 將 public key 取至  Windows 後, 送到 Github -&gt; Settings -&gt; SSH and GPG 設定區, 透過 new key 登錄公鑰.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="6"><span data-contrast="auto"><span>接下來要下載  </span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EQlQii99WuZEl2_6YB_WK28BgZ3sBCVZnmLjLFJS5kXuPQ?e=0i7OKP"><span data-contrast="auto"><span>config</span></span></a><span data-contrast="auto"><span> 設定檔案,  以 sftp 放入 stud.cycu.org 主機的 .ssh 目錄中.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="7"><span data-contrast="auto"><span>上面的  config  主要設定 SSH 協定對  github.com  連線時的代理主機, 但取下  cmsimde  子模組使用的是  https,  因此執行下列  git clone 時將會同時用到   SSH  與 https  協定,  因此除了  .ssh  目錄下要有  config  設定檔案外, 也必須同時在  .gitconfig  檔案中設定  http.proxy,  也就是以 git config --global http.proxy </span></span><a href="http://p42.cycu.org:3128"><span data-contrast="auto"><span>http://p42.cycu.org:3128</span></span></a> <span data-contrast="auto"><span>設定供 https 連線使用的代理主機, 並且以  git config --global  user.name 以及  git config --global  user.email 設定提交用的身分註記.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="8"><span data-contrast="auto"><span>在 stud.cycu.org 中, 以 git clone --recurse-submodules  </span></span><a href="mailto:git@github.com:mdecad2022/site-個人github帳號.git"><span data-contrast="auto"><span>git@github.com:mdecad2022/site-個人github帳號.git</span></span></a><span data-contrast="auto"><span>   取下個人倉儲.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="9"><span data-contrast="auto"><span>假如先前使用  git clone 並沒有取下  cmsimde 子模組內容, 只要在設定 https 代理主機後, 進入倉儲根目錄執行  git submodue update --init  --recursive  即可取下子模組內容.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="10"><span data-contrast="auto"><span>接著下載 </span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB"><span data-contrast="auto"><span>server.py</span></span></a><span data-contrast="auto"><span>, 在 Windows 編輯 </span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB"><span data-contrast="auto"><span>server.py</span></span></a><span data-contrast="auto"><span>, 將個人分配到的 9xxxx 埠號填入後存檔, 以 sftp 放入上列取下的倉儲根目錄.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="11"><span data-contrast="auto"><span>在 stud.cycu.org 系統中, 進入倉儲 (site-github帳號) 後, 執行 python3 server.py, 就可啟用動態網站.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="12"><span data-contrast="auto"><span>設定完成後, 各學員將會有一個廣域網路上的動態網站 (取代 Replit 上的動態網站), </span></span><a href="https://stud.cycu.org:8xxxx"><span data-contrast="auto"><span>https://stud.cycu.org:8xxxx</span></span></a><span data-contrast="auto"><span>   看到個人的動態網站.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="13"><span data-contrast="auto"><span>動態網站改版後, 轉為靜態, 必須透過 source </span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EZn5-jIdQ3pMmi_QxSVWWoYBHvcEtgUrAGCPiIlPyDQ6sw?e=9mc7rR"><span data-contrast="auto"><span>acp</span></span></a><span data-contrast="auto"><span> 以 SSH 將改版內容送回 github. (必須利用 chmod u+x acp 將 acp  檔案屬性改為對  user 可以 execute (也就是 x 屬性).</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="14"><span data-contrast="auto"><span>執行 source acp  "提交字串" 之前必須要 git config  --global user.name, </span></span><span data-contrast="auto"><span>git config  --global user.email, </span></span><span data-contrast="auto"><span>git config  --global http.proxy</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="15"><span data-contrast="auto"><span>上述採用指令模式對  server sftp 也可以利用  </span></span><a href="https://portableapps.com/apps/internet/filezilla_portable"><span data-contrast="auto"><span>Filezilla portable</span></span></a><span data-contrast="auto"><span>, 以圖形介面完成. 而 ssh 也可以透過  putty.exe 執行遠端登入.</span></span><span> </span></li>
</ol>
<p><span>config under .ssh 目錄:</span></p>
<p><span>Host 就是 .ssh/config 設定的對應 session 名稱, 此處若 Host 設為 demo, 則 SSH 對應的 .git/config 中的 URL 就必須使用 <a href="mailto:git@demo:mdecad2022/site-scrum-1.git,">git@demo:mdecad2022/site-scrum-1.git,</a> demo 就是 Host, Port 則是隨後的 %p, 也就是 SSH 協定的內建 port 22, %h 則是 Hostname, 也就是 github.com</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host demo
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p42.cycu.org:3128 --proxy-type http %h %p</pre>
<p><span data-contrast="auto"><span></span></span></p>
<p><span data-contrast="auto"><span>2a 在一台遠端 server, 執行個人倉儲的動態網頁.</span></span><span> </span></p>
<p><span> </span></p>
<ol>
<li data-aria-level="2" data-aria-posinset="1"><span data-contrast="auto"><span>Login to<span> </span></span></span><a href="https://mail.nfu.edu.tw/"><span data-contrast="auto"><span>https://mail.nfu.edu.tw</span></span></a><span data-contrast="auto"><span>  -  查看登入 stud.cycu.org 伺服器的帳號密碼, 帳號為 cad+學號, 密碼為四個字元, 包括數字與小寫英文字母</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="2"><span data-contrast="auto"><span>請到 excel 檔案<span> </span></span></span><a href="https://nfuedu-my.sharepoint.com/:x:/g/personal/yen_nfu_edu_tw/ET-JZNPkNtZDhFiLt8BGZZ4BFMVV1HE73WQt1V44y6vnCQ"><span data-contrast="auto"><span>查詢</span></span></a><span data-contrast="auto"><span><span> </span>stud.cycu.org 中與帳號對應的近端 (給 127.0.0.1 使用, 9 開頭的 port) 與遠端 (給 stud.cycu.org, 8 開頭的 port) 埠號</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="3"><span data-contrast="auto"><span>修改可攜 Python 3.10.6 start.bat, 蓋掉第三行後重新啟動, 目的希望將操作系統的命令搜尋路徑放在可攜目錄搜尋路徑之後.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="4"><span data-contrast="auto"><span>重新啟動可攜程式環境, 在其中一個命令列, ssh <span> </span></span></span><a href="mailto:cad+%E5%AD%B8%E8%99%9F@stud.cycu.org"><span data-contrast="auto"><span>cad+學號@stud.cycu.org</span></span></a><span data-contrast="auto"><span>, 表示要使用 secure shell 遠端登入到 stud.cycu.org, 這是一台 Linux 主機, 安裝 Ubuntu 22.04 Server.(若使用的網路連線協定並無 IPv6,  可將系統的 proxy 設為 140.130.17.4:3128 kmolab/kmolab)</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="5"><span data-contrast="auto"><span>在 ssh 登入畫面, 以 ssh-keygen 建立 key pairs, .ssh/id_rsa 為 private key, id_rsa.pub 為 public key</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="6"><span data-contrast="auto"><span>設法利用 Filezilla, 以 sftp 安全的(Secure)檔案(File)傳輸(Transmission)協定(Protocol), 與 stud.cycu.org 伺服器連結.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="7"><span data-contrast="auto"><span>利用  Filezilla sftp 取下 id_rsa.pub, 登錄至 Github 帳號下的 Setting - &gt;  SSH and GPG keys.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="8"><span data-contrast="auto"><span>對  server sftp 也可以利用 <span> </span></span></span><a href="https://portableapps.com/apps/internet/filezilla_portable"><span data-contrast="auto"><span>Filezilla portable</span></span></a><span data-contrast="auto"><span>, 以圖形介面完成. 而 ssh 也可以透過  putty.exe 執行遠端登入.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="9"><span data-contrast="auto"><span>接下來要下載 <span> </span></span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EQlQii99WuZEl2_6YB_WK28BgZ3sBCVZnmLjLFJS5kXuPQ?e=0i7OKP"><span data-contrast="auto"><span>config</span></span></a><span data-contrast="auto"><span><span> </span>設定檔案,  以 sftp 放入 stud.cycu.org 主機的 .ssh 目錄中.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="10"><span data-contrast="auto"><span>接下來要在  Ubuntu (也就是 stud.cycu.org 這台主機所安裝的操作系統) 中, 設定 .gitconfig, 總共包含三項設定: git config --global user.name "scrum-1", git config --global user.email  "scrum1@mde.tw"   以及 git config --global http.proxy http://p42.cycu.org:3128, 這三個設定必須在 ssh 登入畫面中執行, 設定完成檔案會存入帳號根目錄中的 .gitconfig</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="11"><span data-contrast="auto"><span>利用  git clone --recurse-submodules <span> </span></span></span><a href="mailto:git@demo:mdecad2022/site-scrum-1.git"><span data-contrast="auto"><span>git@demo:mdecad2022/site-scrum-1.git</span></span></a><span data-contrast="auto"><span>  demo</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="12"><span data-contrast="auto"><span>接著下載<span> </span></span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB"><span data-contrast="auto"><span>server.py</span></span></a><span data-contrast="auto"><span>, 在 Windows 編輯<span> </span></span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EXD1ElHAqFNFk6LERfjLYNgBJ4mgWYGSRsRJhq2kQyxK1w?e=rEYXQB"><span data-contrast="auto"><span>server.py</span></span></a><span data-contrast="auto"><span>, 將個人分配到的 9xxxx 埠號填入後存檔, 以 sftp 放入上列取下的倉儲根目錄.</span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="13"><span data-contrast="auto"><span>登入  Ubuntu 後, 會使用的指令: pwd 代表 print working directory, clear -  清除螢幕, cd - 更換目錄, ls -l 列出目錄詳細內容, chmod u+x<span> </span></span></span><a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EZn5-jIdQ3pMmi_QxSVWWoYBHvcEtgUrAGCPiIlPyDQ6sw?e=9mc7rR"><span data-contrast="auto"><span>acp</span></span></a><span data-contrast="auto"><span><span> </span>表示讓 user 可以 execute acp script (能夠讓使用者以 source acp 加上提交字串進行 git add, git commit, git push, 如何在 Windows 執行 acp.bat 加上提交字串.</span></span><span> </span></li>
</ol>
<p></p>
<h2>cmsimde</h2>
<p>能不能將 Blog and Reveal.js 也同動態網站, 直接在線上進行編輯改版?</p>
<p>能不能將 SSH 設定完成後, 直接在線上 acp? (已經完成) 可以透過 user.py 以 blueprint 架構延伸.</p>
<p><a href="/user/threegear">https://stud.cycu.org:8000/user/threegear</a></p>
<p>blog 編輯及轉檔網際化</p>
<p>簡報編輯網際化</p>
<p>Brython three.js based stl viewer</p>
<hr/>
<p>stud.cycu.org 目前是透過不同的 port 讓多用戶能在同一台電腦伺服器上運行動態網站, 而 Replit 或其他商用雲端系統的做法則是加入 dns 的動態設定, 讓每一位用戶可以各自擁有獨一的 domain name, 然後經由此一 domain name 啟用動態網站.</p>
<p>實際的可行作法是讓 demo 用戶在 stud.cycu.org 主機上擁有 demo.stud.cycu.org 或 demo.cycu.org 網域名稱的使用權, 然後當使用者在其帳號下的倉儲執行某一特定的主倉儲動態網站時, 以 demo.cycu.org 啟動, 若執行其帳號下的另一個名稱為 wcms 的倉儲動態網站時, 則以 wcms.demo.cycu.org 啟動, 然後依此類推.</p>
<p>目前 cadlab 總共管理 mde.nfu.edu.tw 與 eng.nfu.edu.tw 等兩個網域的 dns servers, 因此就網路技術層面而言, 上述建構如 Replit 般的網際應用程式服務是可行的. 較為簡單的做法是直接在 dns server 上建立此一服務.</p>
<p>若要跨 server 建立上述服務, 則 server 間仍需透過類似 Websocket 程式變數的派送, 並在使用者建立帳號後, 便直接在 dns 伺服器上登錄其使用權, 且在同一台電腦的 IPv6 address 上利用 CNAME 分辨各用戶所屬的 domain, 然後在後續伺服器設定時採用.</p>
<h3>手機專用</h3>
<p>為了讓手機上的照片或語音輸入能夠使用順暢，上傳的照片要能讓使用者更改檔名，並且讓使用者選擇處理相片大小或進行相關編輯。</p>
<p>Reference:</p>
<p style="padding-left: 30px;"><a href="https://github.com/nhn/tui.image-editor">https://github.com/nhn/tui.image-editor</a> </p>
<p style="padding-left: 30px;"><a href="https://github.com/viliusle/miniPaint">https://github.com/viliusle/miniPaint</a> </p>
<p>另外一項可能的功能是，當使用者在編輯模式下，可直接選擇將拍攝的照片插入頁面中。</p>
<p>並且針對特定頁面中使用者已經輸入的照片檔案，選擇送至伺服器進行影像辨識，並將結果自動嵌入頁面。</p><h3>CMS 改版</h3>
<p><a href="https://github.com/mdecycu/cmsimde/blob/master/static/axuploader.js">https://github.com/mdecycu/cmsimde/blob/master/static/axuploader.js</a> </p>
<p>影片上傳後自動縮圖或允許使用者線上編輯</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-4395-4">Beginning Javascript</a> (2019)</p>
<p style="padding-left: 30px;">Introduction to Javascript</p>
<p style="padding-left: 30px;">Javascript and Debelopment Tools</p>
<p style="padding-left: 30px;">Javascript Variables</p>
<p style="padding-left: 30px;">Javascript Objects and Arrays</p>
<p style="padding-left: 30px;">Javascript Functions and Context</p>
<p style="padding-left: 30px;">Javascript and Events</p>
<p style="padding-left: 30px;">Javascript and Programming Paradigms</p>
<p style="padding-left: 30px;">Javascript and Debugging</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-5394-6">Javascript Next</a> (2019)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-0787-1">Pratical JQuery</a> (2015)</p>
<p><a href="https://link.springer.com/book/10.1007/978-1-4842-3027-5">Beginning JQuery</a> (2017)</p><h3>Nginx</h3>
<p>目前的 stud 伺服器採用 ports 讓多用戶可以在同一台主機上執行動態 cmsimde 網站. 另一種配置方法, 就如同 Github Pages 與 Replit 的作法, 透過 DNS 的配置, 為每一位用戶建立一個獨特的 domain name.</p>
<p>假如要讓 stud 伺服器能為每位用戶建立一個獨特的 domain name. 在 DNS 的架構下, 可以讓同一個 IPv6 address 透過多個 CNAME 別名的方式達成. 而在同一台主機中伺服多個 domain name 網站的方法, 則可以使用 Nginx 中的 virtual hosts (在一台伺服器中建立多個不同符號名稱的網站) 設定達成. 也就是各網站都透過同一個 443 埠號, 為每一個網站建立 server 設定, 並讓 server_name 分別對應至各用戶的網站 domain name. 然後利用 Nginx server 中的 proxy_pass 指向近端的 python3 server.py 所啟動的 localhost 網站內容即可.</p>
<p>至於各別名的 https 網站數位簽章, 則可以利用 Let's Encrypt 的設定達成, 只是一次要在同一台伺服器共享超過兩百個 domain names, 必須透過實作才知道是否可行.</p>
<p>此外, 由於配置過程中若採 interactive 模式必須要動態讓 Python 程式在 DNS 伺服器中以管理者執行 script. 或許可以試試採用 subprocess.check_call(['sudo', 'your_dns_modification_script']) 方式執行.</p><h2>TCExam</h2>
<p>53 機器, 外部 pj2022 內部 tcexam</p>
<p>啟動流程:</p>
<p>進入 C:\tcexam\pgsql 執行 start.bat 啟動資料庫伺服器</p>
<p>其餘對應的 nginx 與 php 執行對應都採 service 啟動</p>
<p>管理設定:</p>
<p>C:\tcexam\tcexam\shared\config\tce_user_registration.php</p>
<p>由 define('K_USRREG_ENABLED', false); 控制是否開放用戶註冊</p><h2>vscode</h2>
<p><a href="https://code.visualstudio.com/docs/editor/vscode-web#_opening-a-project">https://code.visualstudio.com/docs/editor/vscode-web#_opening-a-project</a></p><h1>News</h1>
<p><a href="https://www.pcgamer.com/a-single-chip-has-managed-to-transfer-the-entire-internets-traffic-in-a-single-second/">https://www.pcgamer.com/a-single-chip-has-managed-to-transfer-the-entire-internets-traffic-in-a-single-second/</a> - 網路連線速度只有更快沒有最快</p>
<p><a href="https://www.digitaltrends.com/news/search-and-rescue-jetpack-aces-flight-test-in-lousy-weather/">https://www.digitaljournal.com/business/video-games-could-improve-kids-brains-study/article</a> - 不是所有的線上遊戲都對孩童有害</p>
<p><a href="https://www.digitaltrends.com/news/search-and-rescue-jetpack-aces-flight-test-in-lousy-weather/">https://www.datacenterdynamics.com/en/news/ibm-begins-installing-on-premise-quantum-computer-at-ohios-cleveland-clinic/</a> - 量子電腦的應用已經有很大進展</p>
<p><a href="https://www.digitaltrends.com/news/search-and-rescue-jetpack-aces-flight-test-in-lousy-weather/">https://www.digitaltrends.com/news/search-and-rescue-jetpack-aces-flight-test-in-lousy-weather/</a> - 鋼鐵人救災已經可以實現了</p>
<p><a href="https://www.reuters.com/technology/exclusive-automakers-double-spending-evs-batteries-12-trillion-by-2030-2022-10-21/">https://www.reuters.com/technology/exclusive-automakers-double-spending-evs-batteries-12-trillion-by-2030-2022-10-21/</a> - 世界各大車廠正大量投資發展電動車跟電池技術</p>
<p><a href="https://www.engadget.com/metas-ai-translator-can-interpret-unwritten-languages-150001511.html">https://www.engadget.com/metas-ai-translator-can-interpret-unwritten-languages-150001511.html</a> - 沒有文字的語言也能夠即時口譯了</p>
<p><a href="https://www.vice.com/en/article/pkgxqz/record-labels-say-ai-music-generators-threaten-music-industry">https://www.vice.com/en/article/pkgxqz/record-labels-say-ai-music-generators-threaten-music-industry</a> </p>
<p> - AI 的應用已經殺進音樂產業</p>
<p><a href="https://edition.cnn.com/2022/10/21/tech/artists-ai-images/index.html">https://edition.cnn.com/2022/10/21/tech/artists-ai-images/index.html</a> - 許多畫家的藝術作品被拿來訓練AI可用來產生幾乎相同畫風的不同作品</p>
<p><a href="https://www.techspot.com/news/96392-someone-wrote-javascript-app-accurately-emulates-windows-95.html">https://www.techspot.com/news/96392-someone-wrote-javascript-app-accurately-emulates-windows-95.html</a> - 完全用 JavaScript 寫的類Windows 95 </p>
<p><a href="https://www.nature.com/articles/s41528-022-00207-2">https://www.nature.com/articles/s41528-022-00207-2</a> - 背著機電系統的生化昆蟲可望被用於災難搜尋</p>
<p><a href="https://www.nature.com/articles/s41586-022-04470-1">https://www.nature.com/articles/s41586-022-04470-1</a> - DNA 的編修又向前一步</p>
<p><a href="https://www.imperial.ac.uk/news/240775/new-flexible-steerable-device-placed-live/">https://www.imperial.ac.uk/news/240775/new-flexible-steerable-device-placed-live/</a> - 機器手臂在微創手術應用上的進展</p>
<p><a href="https://wccftech.com/intel-raptor-lake-roars-core-i9-13900k-claws-away-amd-fx-8350-cpu-frequency-world-record-hits-8-81-ghz-clocks/">https://wccftech.com/intel-raptor-lake-roars-core-i9-13900k-claws-away-amd-fx-8350-cpu-frequency-world-record-hits-8-81-ghz-clocks/</a> - CPU 運行速度超紀錄</p>
<p><a href="https://www.quantamagazine.org/inside-the-proton-the-most-complicated-thing-imaginable-20221019/">https://www.quantamagazine.org/inside-the-proton-the-most-complicated-thing-imaginable-20221019/</a> </p>
<p>- 有關質子研究的進展</p>
<p><a href="https://www.imperial.ac.uk/news/239973/3d-printing-drones-work-like-bees/">https://www.imperial.ac.uk/news/239973/3d-printing-drones-work-like-bees/</a> <br/> - 利用無人機進行 3D列印</p>
<p><br/>下一張圖片是用手機直接拍攝後<span>More than a century after Ernest Rutherford discovered the positively charged particle at the heart of every atom, physicists are still struggling to fully understand the proton.</span>轉入：</p>
<p>假如是 iPhone 7 之後的手機，則需要將照片格式改為 JPG。</p>
<p>設定方法是：進入設定 - 相機 - 格式，將高效率改為最相容。</p>
<p><img alt="" height="225" src="/images/image.jpg" width="300"/></p>
<p>下一張照片則是由手機取畫面後轉入：</p>
<p><img alt="" height="534" src="/images/A04E0941-5835-4CAF-B9FA-DBF235FF6401.png" width="300"/></p><h1>Servers</h1>
<p>4 更新為 22.04 之後運作正常，資料已備份。</p>
<p></p>
<h1>cp2022</h1><h2>CP抽點程式</h2>
<p>2022 Fall 課程代號:</p>
<p>以下為抽點程式 (<a href="https://mde.tw/demo/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/f9b2c7a6e6db0e75a2a113920be2fb2685e21a84/1_w7_b_cp2022_random_draw.py">執行</a>):</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Python 的註解分為單行註解與多行, 單行註解可在字串前方放入 #
'''多行註解則可以透過三個單引號前後標註字串或文字段落內容, 
也可以使用三個雙引號作為多行註解的標註
'''
# 使用 import 導入 random 模組, 隨後就可以直接引用 random 模組的方法
import random
courses = {"1a": "0747", "1b": "0761", "2a": "0773", "2b": "0786"}
c_name = "1b"
c = courses[c_name]
# 宣告 url 變數值為字串, 此字串為取得 cp2022 1a 選課成員名單
url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + c + "&amp;column=True"
# 利用上述已經宣告的 url 變數字串值, 作為 open() 函式的輸入變數, 可以連結至該網站
# 連接 url 所代表字串的網站後, 再利用 read() 函式讀取該網站的內容, 即可取得 c_name 的選課成員學號
# url 所屬的網站, 乃 69 中的一台虛擬主機 8/10ff-0-1-2, 並利用 Get 從教務主機取回課程註冊成員學號
# 由於所取回的學號以跳行符號隔開, 因此取回的學號資料行, 再利用 split() 函式, 以 \n 跳行符號分割後
# 所對應到 data 的資料型別將會是數列
data = open(url).read().split("\n")
# 經過檢查 data 數列, 發現最後一個 element 為空字串, 因此利用 [:-1] 去掉數列的最後一個元素, -1 代表數列最後一個元素的索引
#print(data[:-1])
# 設定一個變數, 與修課成員學號數列對應
stud = data[:-1]
# 使用 random 模組中的 shuffle() 函式, 以隨機的方式排列 stud 數列內容
random.shuffle(stud)
# 設定 num 與 5 對應, 或將 5 整數值存入 num 變數所對應的記憶體位址
num = 5
# 利用 for 重複迴圈與 range() 變數, 列印出 (利用 print() 函式) 已經隨機排列次序的 stud 數列的最前面 num 個學號值
for i in range(num):
    print(stud[i])</pre>
<h2>CP 靜態網頁連結</h2>
<p><a href="https://mde.tw/demo/content/Brython.html?c=1a&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/dc9d2548d95523db9aa1b32d75ae61b3fff32853/cp2022_w6b_gen_pages_link.py">1a靜態網頁連結執行</a> (<a href="https://mde.tw/demo/content/Brython.html?c=1a&amp;num=5&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cp2022_w6b_gen_pages_link.py">抽五名</a>)</p>
<p><a href="https://mde.tw/demo/content/Brython.html?c=1b&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/dc9d2548d95523db9aa1b32d75ae61b3fff32853/cp2022_w6b_gen_pages_link.py">1b靜態網頁連結執行</a> (<a href="https://mde.tw/demo/content/Brython.html?c=1b&amp;num=5&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cp2022_w6b_gen_pages_link.py">抽五名</a>)</p>
<p><a href="https://mde.tw/demo/content/Brython.html?c=2a&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cad2022_gen_link.py">2a靜態網頁連結執行</a> (<a href="https://mde.tw/demo/content/Brython.html?c=2a&amp;num=5&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cad2022_gen_link.py">抽五名</a>)</p>
<p><a href="https://mde.tw/demo/content/Brython.html?c=2b&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cad2022_gen_link.py">2b靜態網頁連結執行</a> (<a href="https://mde.tw/demo/content/Brython.html?c=2b&amp;num=5&amp;src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/2004c0db568b5b5b8c81bf498d05bf1cafebdf44/cad2022_gen_link.py">抽五名</a>)</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 從 Brython 的 browser 模組導入 document 與 html 程式庫
from browser import document, html

# 利用 document 物件, 以索引 "brython_div1" 取得已經位於 html 網頁中 id="brython_div1" 的位置, 且對應到 brython_div1 變數
brython_div1 = document["brython_div1"]
# 可以用三個單引號或三個雙引號標註多行註解
# 其中的 html 物件有許多建立 html 超文件內容的方法, 以下分別建立
# BUTTON 按鈕, BR 跳行 (break), 以及 A 網站連結 (Anchor)
# &lt;= 是 Brython 程式語言的特殊符號, 專用於將 html 超文件資料送給網頁對應變數
"""
brython_div1 &lt;= html.BUTTON("hello")
brython_div1 &lt;= html.BR()
brython_div1 &lt;= html.A("google", href="https://google.com")
"""

# 將 1b.txt 資料從 Github Pages 網頁中取下
url = "https://mde.tw/studlist/2022fall/1b.txt"
# 利用 open() 開啟網頁, 利用 read() 讀取網頁內容
# 然後利用 split() 方法, 利用跳行符號對資料進行切割, 切割後的資料結構為 list
# list 資料結構以 [] 區隔, 表示資料為數列, 其起始的索引值為 0
data = open(url).read().split("\n")
# 將每一位學員的靜態網頁共同的網路連結部分設為字串, 且與 mdecp2022 變數對應
mdecp2022 = "https://mdecp2022.github.io/site-"
# 因為取下的資料第一筆為標題, 而最後一筆為空字串, 可以利用 Brython 的數列索引取值範圍將索引 0 與最後一個數列值去除
data = data[1:-1]
# 利用 for 重複迴圈逐一取出 data 數列中的值, 然後以 \t, 也就是 tab 符號切割
for i in data:
    stud = i.split("\t")
    # 第一欄位為學號
    stud_num = stud[0]
    # 第二欄未為 github 帳號
    github_acc = stud[1]
    #print(stud_num, github_acc)
    # 若沒有找到 github 帳號, 以學號作為帳號
    if github_acc == "":
        github_acc = stud_num
    # 將靜態網頁共同連結的變數與各自的 github 帳號, 組成完整的各學員靜態網頁連結
    site = mdecp2022 + github_acc
    # 利用 A 物件產生連結, 然後放入 id="brython_div1 所在的網頁位置
    link = html.A(stud_num, href=site)
    brython_div1 &lt;= link
    # 每一筆資料列出後, 以 break 標註跳行
    brython_div1 &lt;= html.BR()</pre>
<p><br/><br/></p><h2>Brython</h2>
<p>Pyscript?:</p>
<p style="padding-left: 30px;"><a href="https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/">https://www.jhanley.com/blog/pyscript-javascript-and-python-interoperability/</a>　</p>
<p style="padding-left: 30px;"><a href="https://realpython.com/pyscript-python-in-browser/">https://realpython.com/pyscript-python-in-browser/</a> </p>
<p>學習 Brython 程式語言</p>
<p>執行 Three.js 相關 Brython 程式, 需要將 <a href="/downloads/py/pyweb3d.py">pyweb3d.py</a> 放入 downloads/py 目錄中ㄡ</p>
<p><a href="https://mde.tw/content/Python.html">https://mde.tw/content/Python.html</a></p>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p><h1>cad2022</h1>
<p>電腦輔助設計與實習課程</p>
<p>課程內容包括如何使用電腦輔助設計套件</p>
<p>以及如何轉檔之後轉入其他工程分析軟體</p>
<p>包括機電系統控制設計與模擬</p>
<p>在 Onshape 上繪製零組件: <a href="https://onshape.com">https://onshape.com</a></p>
<p>在 Solvespace 上繪製零組件: <a href="https://solvespace.com">https://solvespace.com</a> (自行編譯 <a href="https://github.com/solvespace/solvespace">Solvespace 原始碼</a>)</p>
<p>在 Siemens NX 上繪製零組件: <a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/EclS-NMhqJ9JvCa-pIQ_jMsBQB1tipr_Zgc8kT8ha1kMtg?e=tQ7A1e">下載 NX2027.3401_lite_cad2022.7z</a> (必須登入 @nfu 所屬的 Teams)</p>
<p>利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 執行機電控制系統設計與模擬</p>
<p>利用 stud.cycu.org 動態網站整理上述工具實習流程與結果, 並同步內容至個人的 Github Pages 網站.</p>
<p>相關設計程式包含 server 端的 Python 與 browser 端的 brython, 其間透過 websocket 傳送設計變數.</p>
<h2>stud server</h2>
<h4>ps command</h4>
<p>ps axo pid,comm,user|grep "python3"</p>
<p>before w8:</p>
<p> 208291 python3         cad41023210<br/> 219678 python3         cad41023247<br/> 223605 python3         cad41023216<br/> 343086 python3         demo<br/> 352074 python3         cad41023219<br/> 353608 python3         cad41023212</p>
<h4>specifig port for certain user:</h4>
<p><a href="https://unix.stackexchange.com/questions/486945/restrict-local-port-access-to-a-specific-user">https://unix.stackexchange.com/questions/486945/restrict-local-port-access-to-a-specific-user</a></p>
<p>ip6tables -I OUTPUT -o lo -p tcp --dport 5000 --match owner --uid-owner 1000 -j DROP</p>
<p><a href="https://github.com/hkbakke/fwgen">https://github.com/hkbakke/fwgen</a></p><h3>cadw7</h3>
<p>stage1</p>
<p>152815 python3 cad41023240<br/> 189883 python3 demo<br/> 208291 python3 cad41023210<br/> 219678 python3 cad41023247<br/> 223605 python3 cad41023216<br/> 256296 python3 cad41023124<br/> 257116 python3 cad41023118<br/> 257188 python3 cad41023119</p>
<p>stage2</p>
<p>152815 python3 cad41023240<br/> 189883 python3 demo<br/> 208291 python3 cad41023210<br/> 219678 python3 cad41023247<br/> 223605 python3 cad41023216<br/> 256296 python3 cad41023124<br/> 260052 python3 cad41023122<br/> 264526 python3 cad41023143<br/> 277902 python3 cad41023133<br/> 281016 python3 cad41023119<br/> 283220 python3 cad41023138<br/> 287930 python3 cad41023104<br/> 288921 python3 cad41023154<br/> 290114 python3 cad41023110<br/> 291175 python3 cad41023126<br/> 291606 python3 cad41023108<br/> 292904 python3 cad41023120</p><h3>websocket</h3>
<p><a href="https://snyk.io/blog/how-to-build-a-secure-websocket-server-in-python/">https://snyk.io/blog/how-to-build-a-secure-websocket-server-in-python/</a>　?</p>
<p>網際前端與網際後端傳送設計參數, 若 stud server 可以安裝 NX, 則使用者可以從網際前端將設計變數送到 server 後, 將此設計變數透過 NXOpen 驅動 NX 改變零件尺寸或組立位置.</p>
<p>相同機制, 也可以從網際前端將操控 Web based CoppeliaSim 的控制變數送到  server 端後, 直接操控網際場景中作動的機電系統模擬. 例如: 使用者在網際前端送出控制手足球一端連桿的平移距離與速度, 然後經由手足球 server 端的 Python 程式接收後, 以 Remote API 程式架構控制手足球場景.</p>
<p>Websocket client: <a href="https://github.com/websocket-client/websocket-client">https://github.com/websocket-client/websocket-client</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install websocket-client rel
import websocket
import _thread
import time
import rel

def on_message(ws, message):
    print(message)

def on_error(ws, error):
    print(error)

def on_close(ws, close_status_code, close_msg):
    print("### closed ###")

def on_open(ws):
    print("Opened connection")

if __name__ == "__main__":
    websocket.enableTrace(True)
    ''''
    ws = websocket.WebSocketApp("wss://api.gemini.com/v1/marketdata/BTCUSD",
                              on_open=on_open,
                              on_message=on_message,
                              on_error=on_error,
                              on_close=on_close)
    '''
    ws = websocket.WebSocketApp("ws://localhost:13254",
                              on_open=on_open,
                              on_message=on_message,
                              on_error=on_error,
                              on_close=on_close)
    ws.run_forever(dispatcher=rel)  # Set dispatcher to automatic reconnection
    rel.signal(2, rel.abort)  # Keyboard Interrupt
    rel.dispatch()</pre>
<p>Wesocket server: <a href="https://github.com/Pithikos/python-websocket-server">https://github.com/Pithikos/python-websocket-server</a> </p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pip install websocket-server
import logging
from websocket_server import WebsocketServer

def new_client(client, server):
	server.send_message_to_all("Hey all, a new client has joined us")

server = WebsocketServer(host='127.0.0.1', port=13254, loglevel=logging.INFO)
server.set_fn_new_client(new_client)
server.run_forever()</pre>
<p></p><h2>Solvespace</h2>
<p><span>利用 <a href="https://nfuedu.sharepoint.com/:u:/s/cad2022/Eb7vLI6zX5BOrvj1Gc0M3N8BljxC8i5qp-ftW-PLZT7j7w?e=tXGqbO">portable_2022_fall_13GB.7z</a></span><span>, 完成編譯.</span></p>
<p>由於利用<span> </span><a href="https://www.msys2.org/">MSYS2</a><span> </span>編譯 Solvespace, 需要 install cmake</p>
<p>pacman -S mingw-w64-x86_64-cmake</p>
<p>而且必須 rename Y:\msys64_20210419\mingw64\bin\sh.exe 與 Y:\portablegit_2.31.1\bin\sh.exe 換成其他名稱.</p>
<p>git clone --recurse-submodules https://github.com/solvespace/solvespace.git<br/>cd solvespace<br/>mkdir build<br/>cd build<br/>cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release<br/>make<br/><br/>need libwinpthread-1.dll to execute solvespace.exe</p><h2>Onshape</h2>
<p><a href="https://cad.onshape.com/documents/349085d7029902d4ce9e141d/w/2f10eab3484f8addb1157a25/e/e29b5743830bcea674ae2bcd?renderMode=0&amp;uiState=63524dc50594ef47ab72b47f">Drill Press 鑽床</a></p>
<p><iframe height="600" src="https://configurator.cae.tech/" width="800"></iframe></p><h2>NX</h2>
<p><a href="https://www.youtube.com/channel/UChYht2a_KxGdqqJBQ00m4lA/videos">NX tutorial</a></p>
<p>Onshape: <a href="https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-ling-jian.html">https://cadlab.mde.tw/post/onshape-featurescript-spur-gear-ling-jian.html</a></p><h2>STL</h2>
<p><a href="https://www.adobe.com/creativecloud/file-types/image/vector/stl-file.html">https://www.adobe.com/creativecloud/file-types/image/vector/stl-file.html</a></p>
<p><a href="https://en.wikipedia.org/wiki/STL_(file_format)">https://en.wikipedia.org/wiki/STL_(file_format)</a></p>
<p><a href="https://github.com/omrips/viewstl">https://github.com/omrips/viewstl</a></p>
<p><a href="https://github.com/topics/stl-viewer?l=javascript">https://github.com/topics/stl-viewer?l=javascript</a></p>
<p><a href="https://github.com/kaitlynhova/Three.js-STL-Viewer">https://github.com/kaitlynhova/Three.js-STL-Viewer</a></p>
<p></p>
<h2>CoppeliaSim</h2>
<p>Opencv 與 Scenes</p>
<p><a href="http://mod.cycu.org">http://mod.cycu.org</a> has coppeliaSim on Ubuntu desktop</p>
<h1>Ext</h1>
<p>這裡主要是放入一些延伸內容</p>
<p>包括電腦輔助設計與計算機程式</p>
<h2>Fusion 360</h2>
<p>除了 <a href="https://onshape.com">https://onshape.com</a>  還有 Fusion 360 也提供免費教育版:</p>
<p><a href="https://www.autodesk.com/education/edu-software/overview">https://www.autodesk.com/education/edu-software/overview</a></p>
<h2>Files</h2>
<p>.ssh/config</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">Host github.com
User git
Hostname github.com
ProxyCommand /usr/bin/ncat --proxy p42.cycu.org:3128 --proxy-type http %h %p
</pre>
<p>acp</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">#! /bin/bash
git add .
git commit -m "$1"
git push
</pre>
<p>進入倉儲根目錄後, 以 vi acp 建立, 完成存檔後, 必須再利用 chmod u+x acp, 將 acp 檔案設為 user 可以 execuate.</p>
<p>運用 acp 執行 git add, git commit 與 git push 之前, 必須先處理好 SSH 設定, 也就是利用 ssh-keygen 在 .ssh 目錄下分別建立 id_rsa private key, 以及 id_rsa.pub public key, 而 id_rsa.pub 可以利用 sftp 從 Ubuntu 取至 Windows 環境後, 送進 Github SSH 設定處, 而 .ssh 目錄下還需要建立一個 config 設定檔案, 以便指定 ssh 推送資料時使用 Proxy.</p>
<h2>Linux 指令</h2>
<p>Linux 指令與 Mac BSD 操作系統的指令相同.</p>
<p>常用 Linux 指令:</p>
<p>必須熟悉 vi - 以便能在純 text console 模式下進行檔案編輯</p>
<p>vi acp</p>
<p>表示要利用 vi 編輯 acp 檔案</p>
<p>進入後為指令模式, 可以按下 i 進入 insert 模式, 然後以 i, j, k, l 鍵移動滑鼠游標位置</p>
<p>按下 esc 可以跳出編輯模式, 重新進入指令模式</p>
<p>在指令模式下, 以 a 按鍵 append 字元, 以 o 在下一行插入字元, 以 O 在上一行插入字元.</p>
<p>完成編輯後, 必須進入指令模式, 然後按下 :w, 表示要 write file, 若使用 :q! 表示退出且不存檔, 若使用 :wq, 則存檔案後退出.</p>
<p>cd cmsimde</p>
<p>cd ..</p>
<p>ls -l</p>
<p>pwd</p>
<p>mkdir</p>
<p>chmod u+x acp</p>
<h3>limitation</h3>
<p>Ubuntu itself does not limit connections.</p>
<h2>Brython2</h2>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>